<?php // Include file for common code in daemon and JSON calls
function tournament_log($id, $player_id, $type='none', $value='') {
	query("INSERT INTO `tournament_log` (`tournament_id` ,`sender` ,`type` ,`value`)
		VALUES ('$id', '$player_id', '$type', '$value') ; ") ;
	return mysql_affected_rows() ;
}
function tournament_create($type='none', $name='PHP default name', $players=8, $boosters='', $data=null) {
	$msg = '' ;
	if ( $data == null )
		$data = object() ;
	// Depending on type
	switch ( $type ) {
		case 'draft' :
		case 'sealed' : // Boosters for limited
			$card_connection = card_connect() ;
			$data->boosters = array() ;
			foreach ( explode('-', $boosters) as $boosts ) {
				$boost = $boosts ;
				$nb = 1 ;
				$expl = explode('*', $boosts) ;
				switch ( count($expl) ) {
					case 0 : 
					case 1 :
						break ;
					case 2 :
						$boost = $expl[0] ;
						$nb = intval($expl[1]) ;
						break ;
					default ;
				}
				$boost = strtoupper($boost) ;
				if ( ext_id($boost, $card_connection) < 0 )
					return array(-1, 'Extension '.$boost.' doesn\'t exist'."\n") ;
				else
					for ( $i = 0 ; $i < $nb ; $i++ ) 
						array_push($data->boosters, $boost) ;
			}
			if ( count($data->boosters) < 1 )
				return array(-1, 'No parsable boosters'."\n") ;
			$name .= ' ('.implode($data->boosters, '-').')' ;
			break ;
	}
	// Data management
	if ( ! is_numeric($data->rounds_duration) ) {
		global $round_duration ; // Read default value in config file
		$data->rounds_duration = $round_duration ;
	}
	// Action
	global $mysql_connection ;
	query("INSERT INTO `tournament` ( `type`, `name`, `min_players`, `status`, `data` ) VALUES ( '$type', '".addslashes($name)."', $players, 1, '".mysql_real_escape_string(json_encode($data))."' );", 'Tournament creation', $mysql_connection) ;
	$id = mysql_insert_id($mysql_connection) ;
	global $player_id, $nick ;
	tournament_log($id, $player_id, 'create', $nick) ;
	// Result
	return array($id, $msg) ;
}
function tournament_register($id, $nick, $avatar, $deck='') { // Register player if unregistered, unregistering from all other pending tournaments, unregister if already registered to current
	global $player_id ;
	$register = true ;
	$result = '' ;
	// Basic verifications
	if ( $nick == '' )
		return 'You must choose a valid nickname' ;
	if ( $player_id == '' )
		return 'A problem occured with your automatically-generated player-ID, try to restart your browser';
	// Get tournament info
	$tournament = query_oneshot("SELECT * FROM `tournament` WHERE `id`='$id'") ;
	if ( ! $tournament )
		return 'Tournament '.$id.' not found' ;
	if ( $tournament->status != 1 )
		return 'Tournament '.$id.' not registrable' ;
	if ( ( $tournament->type == 'draft' ) || (  $tournament->type == 'sealed' ) ) // Limited
		$deck = '' ; // Deck will be generated by first tournament's steps
	else // Constructed
		if ( ( $deck == '' ) || ( $deck == 'null' ) ) // Null deck
			return 'You must select a deck in order to register to constructed tournaments' ;
	// Unregister from all pending tournament
	$query = query("SELECT * FROM `registration`, `tournament` WHERE 
		`player_id`='$player_id' AND 
		`registration`.`tournament_id` = `tournament`.`id` AND 
		`tournament`.`status` = 1 ;") ; // Only pending tournaments
	while ( $row = mysql_fetch_object($query) ) {
		tournament_log($row->id, $player_id, 'unregister', $nick) ;
		if ( $row->id == $id ) { // Current tournament in list
			query("DELETE FROM `registration` WHERE `tournament_id`='$id' AND `player_id`='$player_id' ;") ; //Unregister
			$result .= 'Unsuscribed from tournament #'.$id."\n" ;
			return $result ;
		} else {
			query("DELETE FROM `registration` WHERE `tournament_id`='".$row->id."' AND `player_id`='$player_id'") ;
			$result .= 'Unregistered from pending tournament #'.$row->id." (you can only be registered to 1 tournament)\n" ; 
		}
	}
	// Compare with already registered players
	$players = tournament_playing_players($tournament) ;
	foreach ( $players as $player) {
		if ( $player->player_id == $player_id )
			return 'There is already a registered player with ID '.$player_id ;
		if ( $player->nick == $nick )
			return 'There is already a registered player with nick '.$nick ;
		if ( $player->avatar == $avatar )
			return 'There is already a registered player with avatar '.$avatar ;
	}
	if ( ( $tournament->type == 'draft' ) || ( $tournament->type == 'sealed' ) )
		$deck = '' ;
	query("INSERT INTO `registration` ( `tournament_id`, `player_id`, `nick`, `update`, `avatar`, `deck` )
				VALUES ( '$id', '$player_id', '$nick', NOW(), '$avatar', '".addslashes($deck)."' );") ;
	tournament_log($id, $player_id, 'register', $nick) ;
	return $result ;
}
function registration_get($id=0, $player_id='') {
	if ( $player_id == '' )
		global $player_id ;
	if ( $row = mysql_fetch_object(query("SELECT * FROM `registration` WHERE `tournament_id` = '$id' AND `player_id` = '$player_id' ; ")) )
		return $row ;
	else
		return $player_id ;
}
function tournament_playing_players($tournament) {
	$players = array() ;
	$players_query = query("SELECT *
	FROM `registration`
	WHERE
		`tournament_id` = '".$tournament->id."'
		AND `status` <= 6
	ORDER BY `order` ASC ; ") ;
	while ( $row = mysql_fetch_object($players_query) )
		$players[] = $row ;
	return $players ;
}
function tournament_all_players($tournament) {
	$players = array() ;
	$players_query = query("SELECT *
	FROM `registration`
	WHERE
		`tournament_id` = '".$tournament->id."'
	ORDER BY `order` ASC ; ") ;
	while ( $row = mysql_fetch_object($players_query) )
		$players[] = $row ;
	return $players ;
}
?>
